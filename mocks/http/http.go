// Code generated by mockery v2.46.0. DO NOT EDIT.

package http

import (
	context "context"

	entity "github.com/vadimbarashkov/url-shortener/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockUrlUseCase is an autogenerated mock type for the urlUseCase type
type MockUrlUseCase struct {
	mock.Mock
}

type MockUrlUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUrlUseCase) EXPECT() *MockUrlUseCase_Expecter {
	return &MockUrlUseCase_Expecter{mock: &_m.Mock}
}

// DeactivateURL provides a mock function with given fields: ctx, shortCode
func (_m *MockUrlUseCase) DeactivateURL(ctx context.Context, shortCode string) error {
	ret := _m.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUrlUseCase_DeactivateURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateURL'
type MockUrlUseCase_DeactivateURL_Call struct {
	*mock.Call
}

// DeactivateURL is a helper method to define mock.On call
//   - ctx context.Context
//   - shortCode string
func (_e *MockUrlUseCase_Expecter) DeactivateURL(ctx interface{}, shortCode interface{}) *MockUrlUseCase_DeactivateURL_Call {
	return &MockUrlUseCase_DeactivateURL_Call{Call: _e.mock.On("DeactivateURL", ctx, shortCode)}
}

func (_c *MockUrlUseCase_DeactivateURL_Call) Run(run func(ctx context.Context, shortCode string)) *MockUrlUseCase_DeactivateURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUrlUseCase_DeactivateURL_Call) Return(_a0 error) *MockUrlUseCase_DeactivateURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUrlUseCase_DeactivateURL_Call) RunAndReturn(run func(context.Context, string) error) *MockUrlUseCase_DeactivateURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetURLStats provides a mock function with given fields: ctx, shortCode
func (_m *MockUrlUseCase) GetURLStats(ctx context.Context, shortCode string) (*entity.URL, error) {
	ret := _m.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for GetURLStats")
	}

	var r0 *entity.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.URL, error)); ok {
		return rf(ctx, shortCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.URL); ok {
		r0 = rf(ctx, shortCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUrlUseCase_GetURLStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURLStats'
type MockUrlUseCase_GetURLStats_Call struct {
	*mock.Call
}

// GetURLStats is a helper method to define mock.On call
//   - ctx context.Context
//   - shortCode string
func (_e *MockUrlUseCase_Expecter) GetURLStats(ctx interface{}, shortCode interface{}) *MockUrlUseCase_GetURLStats_Call {
	return &MockUrlUseCase_GetURLStats_Call{Call: _e.mock.On("GetURLStats", ctx, shortCode)}
}

func (_c *MockUrlUseCase_GetURLStats_Call) Run(run func(ctx context.Context, shortCode string)) *MockUrlUseCase_GetURLStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUrlUseCase_GetURLStats_Call) Return(_a0 *entity.URL, _a1 error) *MockUrlUseCase_GetURLStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUrlUseCase_GetURLStats_Call) RunAndReturn(run func(context.Context, string) (*entity.URL, error)) *MockUrlUseCase_GetURLStats_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyURL provides a mock function with given fields: ctx, shortCode, originalURL
func (_m *MockUrlUseCase) ModifyURL(ctx context.Context, shortCode string, originalURL string) (*entity.URL, error) {
	ret := _m.Called(ctx, shortCode, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for ModifyURL")
	}

	var r0 *entity.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.URL, error)); ok {
		return rf(ctx, shortCode, originalURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.URL); ok {
		r0 = rf(ctx, shortCode, originalURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, shortCode, originalURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUrlUseCase_ModifyURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyURL'
type MockUrlUseCase_ModifyURL_Call struct {
	*mock.Call
}

// ModifyURL is a helper method to define mock.On call
//   - ctx context.Context
//   - shortCode string
//   - originalURL string
func (_e *MockUrlUseCase_Expecter) ModifyURL(ctx interface{}, shortCode interface{}, originalURL interface{}) *MockUrlUseCase_ModifyURL_Call {
	return &MockUrlUseCase_ModifyURL_Call{Call: _e.mock.On("ModifyURL", ctx, shortCode, originalURL)}
}

func (_c *MockUrlUseCase_ModifyURL_Call) Run(run func(ctx context.Context, shortCode string, originalURL string)) *MockUrlUseCase_ModifyURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUrlUseCase_ModifyURL_Call) Return(_a0 *entity.URL, _a1 error) *MockUrlUseCase_ModifyURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUrlUseCase_ModifyURL_Call) RunAndReturn(run func(context.Context, string, string) (*entity.URL, error)) *MockUrlUseCase_ModifyURL_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveShortCode provides a mock function with given fields: ctx, shortCode
func (_m *MockUrlUseCase) ResolveShortCode(ctx context.Context, shortCode string) (*entity.URL, error) {
	ret := _m.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for ResolveShortCode")
	}

	var r0 *entity.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.URL, error)); ok {
		return rf(ctx, shortCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.URL); ok {
		r0 = rf(ctx, shortCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUrlUseCase_ResolveShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveShortCode'
type MockUrlUseCase_ResolveShortCode_Call struct {
	*mock.Call
}

// ResolveShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - shortCode string
func (_e *MockUrlUseCase_Expecter) ResolveShortCode(ctx interface{}, shortCode interface{}) *MockUrlUseCase_ResolveShortCode_Call {
	return &MockUrlUseCase_ResolveShortCode_Call{Call: _e.mock.On("ResolveShortCode", ctx, shortCode)}
}

func (_c *MockUrlUseCase_ResolveShortCode_Call) Run(run func(ctx context.Context, shortCode string)) *MockUrlUseCase_ResolveShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUrlUseCase_ResolveShortCode_Call) Return(_a0 *entity.URL, _a1 error) *MockUrlUseCase_ResolveShortCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUrlUseCase_ResolveShortCode_Call) RunAndReturn(run func(context.Context, string) (*entity.URL, error)) *MockUrlUseCase_ResolveShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// ShortenURL provides a mock function with given fields: ctx, originalURL
func (_m *MockUrlUseCase) ShortenURL(ctx context.Context, originalURL string) (*entity.URL, error) {
	ret := _m.Called(ctx, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for ShortenURL")
	}

	var r0 *entity.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.URL, error)); ok {
		return rf(ctx, originalURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.URL); ok {
		r0 = rf(ctx, originalURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, originalURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUrlUseCase_ShortenURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShortenURL'
type MockUrlUseCase_ShortenURL_Call struct {
	*mock.Call
}

// ShortenURL is a helper method to define mock.On call
//   - ctx context.Context
//   - originalURL string
func (_e *MockUrlUseCase_Expecter) ShortenURL(ctx interface{}, originalURL interface{}) *MockUrlUseCase_ShortenURL_Call {
	return &MockUrlUseCase_ShortenURL_Call{Call: _e.mock.On("ShortenURL", ctx, originalURL)}
}

func (_c *MockUrlUseCase_ShortenURL_Call) Run(run func(ctx context.Context, originalURL string)) *MockUrlUseCase_ShortenURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUrlUseCase_ShortenURL_Call) Return(_a0 *entity.URL, _a1 error) *MockUrlUseCase_ShortenURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUrlUseCase_ShortenURL_Call) RunAndReturn(run func(context.Context, string) (*entity.URL, error)) *MockUrlUseCase_ShortenURL_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUrlUseCase creates a new instance of MockUrlUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUrlUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUrlUseCase {
	mock := &MockUrlUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
