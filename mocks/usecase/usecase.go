// Code generated by mockery v2.46.0. DO NOT EDIT.

package usecase

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/vadimbarashkov/url-shortener/internal/entity"
)

// MockUrlRepository is an autogenerated mock type for the urlRepository type
type MockUrlRepository struct {
	mock.Mock
}

type MockUrlRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUrlRepository) EXPECT() *MockUrlRepository_Expecter {
	return &MockUrlRepository_Expecter{mock: &_m.Mock}
}

// Remove provides a mock function with given fields: ctx, shortCode
func (_m *MockUrlRepository) Remove(ctx context.Context, shortCode string) error {
	ret := _m.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUrlRepository_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockUrlRepository_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - shortCode string
func (_e *MockUrlRepository_Expecter) Remove(ctx interface{}, shortCode interface{}) *MockUrlRepository_Remove_Call {
	return &MockUrlRepository_Remove_Call{Call: _e.mock.On("Remove", ctx, shortCode)}
}

func (_c *MockUrlRepository_Remove_Call) Run(run func(ctx context.Context, shortCode string)) *MockUrlRepository_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUrlRepository_Remove_Call) Return(_a0 error) *MockUrlRepository_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUrlRepository_Remove_Call) RunAndReturn(run func(context.Context, string) error) *MockUrlRepository_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAndUpdateStats provides a mock function with given fields: ctx, shortCode
func (_m *MockUrlRepository) RetrieveAndUpdateStats(ctx context.Context, shortCode string) (*entity.URL, error) {
	ret := _m.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAndUpdateStats")
	}

	var r0 *entity.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.URL, error)); ok {
		return rf(ctx, shortCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.URL); ok {
		r0 = rf(ctx, shortCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUrlRepository_RetrieveAndUpdateStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAndUpdateStats'
type MockUrlRepository_RetrieveAndUpdateStats_Call struct {
	*mock.Call
}

// RetrieveAndUpdateStats is a helper method to define mock.On call
//   - ctx context.Context
//   - shortCode string
func (_e *MockUrlRepository_Expecter) RetrieveAndUpdateStats(ctx interface{}, shortCode interface{}) *MockUrlRepository_RetrieveAndUpdateStats_Call {
	return &MockUrlRepository_RetrieveAndUpdateStats_Call{Call: _e.mock.On("RetrieveAndUpdateStats", ctx, shortCode)}
}

func (_c *MockUrlRepository_RetrieveAndUpdateStats_Call) Run(run func(ctx context.Context, shortCode string)) *MockUrlRepository_RetrieveAndUpdateStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUrlRepository_RetrieveAndUpdateStats_Call) Return(_a0 *entity.URL, _a1 error) *MockUrlRepository_RetrieveAndUpdateStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUrlRepository_RetrieveAndUpdateStats_Call) RunAndReturn(run func(context.Context, string) (*entity.URL, error)) *MockUrlRepository_RetrieveAndUpdateStats_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveByShortCode provides a mock function with given fields: ctx, shortCode
func (_m *MockUrlRepository) RetrieveByShortCode(ctx context.Context, shortCode string) (*entity.URL, error) {
	ret := _m.Called(ctx, shortCode)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByShortCode")
	}

	var r0 *entity.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.URL, error)); ok {
		return rf(ctx, shortCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.URL); ok {
		r0 = rf(ctx, shortCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUrlRepository_RetrieveByShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveByShortCode'
type MockUrlRepository_RetrieveByShortCode_Call struct {
	*mock.Call
}

// RetrieveByShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - shortCode string
func (_e *MockUrlRepository_Expecter) RetrieveByShortCode(ctx interface{}, shortCode interface{}) *MockUrlRepository_RetrieveByShortCode_Call {
	return &MockUrlRepository_RetrieveByShortCode_Call{Call: _e.mock.On("RetrieveByShortCode", ctx, shortCode)}
}

func (_c *MockUrlRepository_RetrieveByShortCode_Call) Run(run func(ctx context.Context, shortCode string)) *MockUrlRepository_RetrieveByShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUrlRepository_RetrieveByShortCode_Call) Return(_a0 *entity.URL, _a1 error) *MockUrlRepository_RetrieveByShortCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUrlRepository_RetrieveByShortCode_Call) RunAndReturn(run func(context.Context, string) (*entity.URL, error)) *MockUrlRepository_RetrieveByShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, shortCode, originalURL
func (_m *MockUrlRepository) Save(ctx context.Context, shortCode string, originalURL string) (*entity.URL, error) {
	ret := _m.Called(ctx, shortCode, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *entity.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.URL, error)); ok {
		return rf(ctx, shortCode, originalURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.URL); ok {
		r0 = rf(ctx, shortCode, originalURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, shortCode, originalURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUrlRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockUrlRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - shortCode string
//   - originalURL string
func (_e *MockUrlRepository_Expecter) Save(ctx interface{}, shortCode interface{}, originalURL interface{}) *MockUrlRepository_Save_Call {
	return &MockUrlRepository_Save_Call{Call: _e.mock.On("Save", ctx, shortCode, originalURL)}
}

func (_c *MockUrlRepository_Save_Call) Run(run func(ctx context.Context, shortCode string, originalURL string)) *MockUrlRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUrlRepository_Save_Call) Return(_a0 *entity.URL, _a1 error) *MockUrlRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUrlRepository_Save_Call) RunAndReturn(run func(context.Context, string, string) (*entity.URL, error)) *MockUrlRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, shortCode, originalURL
func (_m *MockUrlRepository) Update(ctx context.Context, shortCode string, originalURL string) (*entity.URL, error) {
	ret := _m.Called(ctx, shortCode, originalURL)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.URL, error)); ok {
		return rf(ctx, shortCode, originalURL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.URL); ok {
		r0 = rf(ctx, shortCode, originalURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, shortCode, originalURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUrlRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUrlRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - shortCode string
//   - originalURL string
func (_e *MockUrlRepository_Expecter) Update(ctx interface{}, shortCode interface{}, originalURL interface{}) *MockUrlRepository_Update_Call {
	return &MockUrlRepository_Update_Call{Call: _e.mock.On("Update", ctx, shortCode, originalURL)}
}

func (_c *MockUrlRepository_Update_Call) Run(run func(ctx context.Context, shortCode string, originalURL string)) *MockUrlRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUrlRepository_Update_Call) Return(_a0 *entity.URL, _a1 error) *MockUrlRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUrlRepository_Update_Call) RunAndReturn(run func(context.Context, string, string) (*entity.URL, error)) *MockUrlRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUrlRepository creates a new instance of MockUrlRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUrlRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUrlRepository {
	mock := &MockUrlRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
